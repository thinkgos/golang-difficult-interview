apiVersion: v1        　　          # required，版本号，例如v1,版本号必须可以用 kubectl api-versions 查询到 .
kind: Pod       　　　　　　         # required，Pod
metadata:       　　　　　　         # required，元数据对象
  name: string        　　            # required，Pod名称,命名规范需符合RFC1035规范
  namespace: string     　　          # required，Pod所属的namespace,默认为"default"
  labels:       　　　　　　           # 自定义标签列表
    - name: string      　              # 自定义标签名字
  annotations:        　　            # 自定义注解列表
    - name: string                      # 自定义注解名字
spec:         　　　　　　　         # required, Pod中容器的详细定义
  containers:       　　　　            # required，List, Pod中容器列表
  - name: string      　　                # required，容器名称,需符合RFC1035规范
    image: string     　　                # required，容器的镜像名称
    imagePullPolicy: [ Always|Never|IfNotPresent ]  #获取镜像的策略 Alawys表示下载镜像,IfnotPresent表示优先使用本地镜像,否则下载镜像，Nerver表示仅使用本地镜像
    command: [string]     　　            # 容器的启动命令列表，如不指定，使用打包时使用的启动命令
    args: [string]      　　              # 容器的启动命令参数列表
    workingDir: string                   # 容器的工作目录
    volumeMounts:     　　　　            # 挂载到容器内部的存储卷配置
      - name: string      　　　            # 引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名
        mountPath: string                  # 存储卷在容器内mount的绝对路径，应少于512字符
        readOnly: boolean                  # 是否为只读模式
    ports:        　　　　　　             # 需要暴露的端口号列表
      - name: string      　　　            # 端口的名称
        containerPort: int                 # 容器需要监听的端口号
        hostPort: int     　　              # 容器所在主机需要监听的端口号，默认与Container相同
        protocol: string                   # 端口协议，支持TCP和UDP，默认TCP
    env:        　　　　　　               # 容器运行前需设置的环境变量列表
      - name: string      　　              # 环境变量名称
        value: string     　　              # 环境变量的值
    resources:        　　                # 资源限制和请求的设置
      limits:       　　　　                 # 资源限制的设置
        cpu: string     　　                # Cpu的限制，单位为core数，将用于docker run --cpu-shares参数
        memory: string                     # 内存限制，单位可以为Mib/Gib，将用于docker run --memory参数
      requests:       　　                # 资源请求的设置
        cpu: string     　　                # Cpu请求，容器启动的初始可用数量
        memory: string                     # 内存请求,容器启动的初始可用数量
    livenessProbe:      　　              # 对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可
      exec:       　　　　　　               #对Pod容器内检查方式设置为exec方式
        command: [string]                     #exec方式需要制定的命令或脚本
      httpGet:        　　　　             # 对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port
        path: string
        port: number
        host: string
        scheme: string
        HttpHeaders:
        - name: string
          value: string
      tcpSocket:                          # 对Pod内个容器健康检查方式设置为tcpSocket方式
         port: number
      initialDelaySeconds: 0              # 容器启动完成后首次探测的时间，单位为秒
      timeoutSeconds: 0    　　            # 对容器健康检查探测等待响应的超时时间，单位秒，默认1秒, 若超过此时间认为容器不健康,会重启该容器
      periodSeconds: 0     　　            # 对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
      successThreshold: 0                 
      failureThreshold: 0
      securityContext:
        privileged: false
    lifecycle:
      postStart:                          # 容器启动后,执行指定操作,不保证顺序.
        exec:
          command: [string]              
      preStop:                            # 容器杀死之前,执行指定操作,这个操作是同步的,阻塞执行完成,才允许容器被杀死.
        exec:
          command: [string]
  restartPolicy: [Always | Never | OnFailure] # Pod的重启策略，Always(默认)表示一旦不管以何种方式终止运行，kubelet服务将重启它，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod
  nodeSelector: obeject   　　     #设置NodeSelector表示将该Pod调度到带有这个label的node上，以key：value的格式指定
  nodeName: string                # 此字段由K8s赋值,一旦已赋值,表明此pod已调度过. 测试或调试时可以用它验过调试器
  imagePullSecrets:               #Pull镜像时使用的secret名称，以name：secretkey格式指定
    - name: string                   #name：secretkey格式
  volumes:        　　　　　　      # 在该pod上定义共享存储卷列表
    - name: string     　　 　　      # 共享存储卷名称 （volumes类型有很多种） 见权威指南p154
      emptyDir: {}      　　　　      # 类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值
      hostPath: string      　　     # 类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录
        path: string      　　         #Pod所在宿主机的目录，将被用于同期中mount的目录
      secret:       　　　　　　      # 类型为secret的存储卷，挂载集群与定义的secre对象到容器内部
        scretname: string         
        items:     
        - key: string
          path: string
      configMap:      　　　　        # 类型为configMap的存储卷，挂载预定义的configMap对象到容器内部
        name: string
        items:
        - key: string
          path: string
  hostAliases:                    # 定义了 Pod 的hosts文件（比如 /etc/hosts）里的内容
    - ip: "10.1.2.3"
      hostnames:
      - "foo.remote"
      - "bar.remote"
  shareProcessNamespace: true    # Pod 里的容器要共享 PID Namespace。
  hostNetwork: false      　　    # 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络
  hostIPC: true                  # 共享宿主机 IPC
  hostPID: true                  # 共享宿主机 PID